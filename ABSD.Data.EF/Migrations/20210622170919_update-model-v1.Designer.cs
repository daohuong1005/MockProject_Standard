// <auto-generated />
using System;
using ABSD.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ABSD.Data.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210622170919_update-model-v1")]
    partial class updatemodelv1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ABSD.Data.Entities.Accreditation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accreditations");
                });

            modelBuilder.Entity("ABSD.Data.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRole");
                });

            modelBuilder.Entity("ABSD.Data.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ClientSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClientSupports");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ContractContent", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipationId")
                        .HasColumnType("int");

                    b.HasKey("ContentId", "ContractId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ParticipationId");

                    b.ToTable("ContractContents");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Criterion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Criterions");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Funding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<decimal>("FundingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FundingContinuationAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FundingContinuationDetails")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("FundingContinuationNeeded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FundingEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("FundingNeeds")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FundingSource")
                        .HasColumnType("int");

                    b.Property<DateTime>("FundingStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FundraisingComplete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FundraisingCompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FundraisingDonationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FundraisingDonationIncremental")
                        .HasColumnType("bit");

                    b.Property<decimal>("FundraisingDonorAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("FundraisingDonorAnonymous")
                        .HasColumnType("bit");

                    b.Property<string>("FundraisingForText")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FundraisingNeeded")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FundraisingRequiredBy")
                        .HasColumnType("datetime2");

                    b.Property<string>("FundraisingWhy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Fundings");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InterventionName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Interventions");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Participation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParticipationName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Premise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Premises");
                });

            modelBuilder.Entity("ABSD.Data.Entities.RoleOrganization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleOrganizations");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<bool>("ContractStagedPayment")
                        .HasColumnType("bit");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("FundingId")
                        .HasColumnType("int");

                    b.Property<int?>("ParticipationId")
                        .HasColumnType("int");

                    b.Property<int?>("ProgrammeId")
                        .HasColumnType("int");

                    b.Property<string>("ReferralProcess")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ServiceActive")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceContactCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ServiceContractValue")
                        .HasColumnType("int");

                    b.Property<string>("ServiceDesscriptionDelivery")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ServiceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ServiceExtendable")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceFullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ServiceShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ServiceStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ServiceStartExpected")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ServiceTimeLimited")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.HasIndex("FundingId");

                    b.HasIndex("ParticipationId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceAccreditation", b =>
                {
                    b.Property<int>("AccreditationId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("AccreditationId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAccreditations");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceClientSupport", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ClientSupportId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "ClientSupportId");

                    b.HasIndex("ClientSupportId");

                    b.ToTable("ServiceClientSupports");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceCriterionSupport", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("CriterionId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "CriterionId");

                    b.HasIndex("CriterionId");

                    b.ToTable("ServiceCriterionSupports");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceIntervention", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("InterventionId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("ServiceInterventions");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceOrganization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceOrganizations");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServicePremises", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("PremiseId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ServiceId", "PremiseId");

                    b.HasIndex("PremiseId");

                    b.ToTable("ServicePremises");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("ABSD.Data.Entities.TrustDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TrustRegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrustRegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("ABSD.Data.Entities.TrustRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ContractContent", b =>
                {
                    b.HasOne("ABSD.Data.Entities.Content", "Content")
                        .WithMany("ContractContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABSD.Data.Entities.Contract", "Contract")
                        .WithMany("ContractContents")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABSD.Data.Entities.Participation", "Participation")
                        .WithMany("ContractContents")
                        .HasForeignKey("ParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Contract");

                    b.Navigation("Participation");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Funding", b =>
                {
                    b.HasOne("ABSD.Data.Entities.Contact", "Contact")
                        .WithMany("Fundings")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("ABSD.Data.Entities.RoleOrganization", b =>
                {
                    b.HasOne("ABSD.Data.Entities.Organization", "Organization")
                        .WithMany("RoleOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABSD.Data.Entities.AppRole", "AppRole")
                        .WithMany("RoleOrganizations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Service", b =>
                {
                    b.HasOne("ABSD.Data.Entities.Contact", "Contact")
                        .WithMany("Services")
                        .HasForeignKey("ContactId");

                    b.HasOne("ABSD.Data.Entities.Contract", "Contract")
                        .WithOne("Service")
                        .HasForeignKey("ABSD.Data.Entities.Service", "ContractId");

                    b.HasOne("ABSD.Data.Entities.Funding", "Funding")
                        .WithMany("Services")
                        .HasForeignKey("FundingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ABSD.Data.Entities.Participation", "Participation")
                        .WithMany("Services")
                        .HasForeignKey("ParticipationId");

                    b.HasOne("ABSD.Data.Entities.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId");

                    b.Navigation("Contact");

                    b.Navigation("Contract");

                    b.Navigation("Funding");

                    b.Navigation("Participation");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceAccreditation", b =>
                {
                    b.HasOne("ABSD.Data.Entities.Accreditation", "Accreditation")
                        .WithMany("ServiceAccreditations")
                        .HasForeignKey("AccreditationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABSD.Data.Entities.Service", "Service")
                        .WithMany("ServiceAccreditations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accreditation");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceClientSupport", b =>
                {
                    b.HasOne("ABSD.Data.Entities.ClientSupport", "ClientSupport")
                        .WithMany("ServiceClientSupports")
                        .HasForeignKey("ClientSupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABSD.Data.Entities.Service", "Service")
                        .WithMany("ServiceClientSupports")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientSupport");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceCriterionSupport", b =>
                {
                    b.HasOne("ABSD.Data.Entities.Criterion", "Criterion")
                        .WithMany("ServiceCriterionSupports")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABSD.Data.Entities.Service", "Service")
                        .WithMany("ServiceCriterionSupports")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceIntervention", b =>
                {
                    b.HasOne("ABSD.Data.Entities.Intervention", "Intervention")
                        .WithMany("ServiceInterventions")
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABSD.Data.Entities.Service", "Service")
                        .WithMany("ServiceInterventions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intervention");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceOrganization", b =>
                {
                    b.HasOne("ABSD.Data.Entities.Organization", "Organization")
                        .WithMany("ServiceOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABSD.Data.Entities.Service", "Service")
                        .WithMany("ServiceOrganizations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServicePremises", b =>
                {
                    b.HasOne("ABSD.Data.Entities.Premise", "Premise")
                        .WithMany("ServicePremises")
                        .HasForeignKey("PremiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABSD.Data.Entities.Service", "Service")
                        .WithMany("ServicePremises")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Premise");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ABSD.Data.Entities.TrustDistrict", b =>
                {
                    b.HasOne("ABSD.Data.Entities.TrustRegion", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("TrustRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ABSD.Data.Entities.TrustRegion", b =>
                {
                    b.HasOne("ABSD.Data.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Accreditation", b =>
                {
                    b.Navigation("ServiceAccreditations");
                });

            modelBuilder.Entity("ABSD.Data.Entities.AppRole", b =>
                {
                    b.Navigation("RoleOrganizations");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ClientSupport", b =>
                {
                    b.Navigation("ServiceClientSupports");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Contact", b =>
                {
                    b.Navigation("Fundings");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Content", b =>
                {
                    b.Navigation("ContractContents");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Contract", b =>
                {
                    b.Navigation("ContractContents");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Criterion", b =>
                {
                    b.Navigation("ServiceCriterionSupports");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Funding", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Intervention", b =>
                {
                    b.Navigation("ServiceInterventions");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Organization", b =>
                {
                    b.Navigation("RoleOrganizations");

                    b.Navigation("ServiceOrganizations");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Participation", b =>
                {
                    b.Navigation("ContractContents");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Premise", b =>
                {
                    b.Navigation("ServicePremises");
                });

            modelBuilder.Entity("ABSD.Data.Entities.Service", b =>
                {
                    b.Navigation("ServiceAccreditations");

                    b.Navigation("ServiceClientSupports");

                    b.Navigation("ServiceCriterionSupports");

                    b.Navigation("ServiceInterventions");

                    b.Navigation("ServiceOrganizations");

                    b.Navigation("ServicePremises");
                });

            modelBuilder.Entity("ABSD.Data.Entities.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("ABSD.Data.Entities.TrustRegion", b =>
                {
                    b.Navigation("Districts");
                });
#pragma warning restore 612, 618
        }
    }
}
